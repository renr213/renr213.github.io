---
title: "Meet the toolkit"
subtitle: "Lecture 1"
date: "January 9, 2025"
format: revealjs
---

# Housekeeping

## Announcements

-   If you have not yet completed the "getting to know you survey", please do so ASAP!

# The course!

## Course homepage

Let's take a tour!

## Collaboration policy

-   Assignments must be completed individually. You may **not** directly share answers / code with others, however you are welcome to discuss the problems in general and ask for advice.

-   Exams must be completed individually. You may **not** discuss any aspect of the exam with peers. If you have questions, post as private questions on the course forum, only the teaching team will see and answer.

## Sharing / reusing code policy

-   We are aware that a huge volume of code is available on the web, and many tasks may have solutions posted

-   Unless explicitly stated otherwise, this course's policy is that you may make use of any online resources (e.g. RStudio Community, StackOverflow, etc.) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s).

-   Any recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source

## Use of generative AI {.smaller}

-   Treat generative AI, such as GitHub Copilot and ChatGPT, the same as other online resources.

-   Guiding principles:

    -   \(1\) *Cognitive dimension:* Working with AI should not reduce your ability to think clearly. We will practice using AI to facilitate—rather than hinder—learning.

    -   \(2\) *Ethical dimension***:** Students using AI should be transparent about their use and make sure it aligns with academic integrity.

-   **✅ AI tools for code:** You may make use of the technology for coding examples on assignments; if you do so, you must explicitly cite where you obtained the code. See the syllabus for guidelines for citing AI-generated content.

-   **❌ AI tools for narrative:** Unless instructed otherwise, you may not use generative AI to write narrative on assignments. In general, you may use generative AI as a resource as you complete assignments but not to answer the exercises for you.

## Academic integrity

Familiarize yourself with UAlberta's [Student Academic Integrity Policy](https://policiesonline.ualberta.ca/PoliciesProcedures/Procedures/Student%20Academic%20Integrity%20Policy%20Appendix%20A%20Academic%20Misconduct.pdf)

## Most importantly!

Ask if you're not sure if something violates a policy!

## Five tips for success

1.  Complete all the preparation work before class.

2.  Ask questions.

3.  Do the readings.

4.  Do the lab.

5.  Don’t procrastinate – at least on a weekly basis!

# Course toolkit

## Course toolkit {.smaller}

::::: columns
::: {.column width="50%"}
**Course operation**

-   Materials: <https://renr213.github.io> and GitHub Classroom
-   Submission: Canvas
-   Discussion: Canvas
-   Gradebook: Canvas
:::

::: {.column width="50%"}
**Doing data science**

-   Computing:
    -   R
    -   RStudio
    -   tidyverse
    -   Quarto
-   Version control and collaboration:
    -   Git
    -   GitHub
:::
:::::

# Toolkit: Computing

## Learning goals {.smaller}

By the end of the course, you will be able to...

::: incremental
-   gain insight from data
-   gain insight from data, **reproducibly**
-   gain insight from data, reproducibly, **using modern programming tools and techniques**
-   gain insight from data, reproducibly **(with literate programming and version control)**, using modern programming tools and techniques
:::

# Reproducible data analysis

## Reproducibility checklist {.smaller}

::: question
What does it mean for a data analysis to be "reproducible"?
:::

. . .

**Short-term goals:**

-   Are the tables and figures reproducible from the code and data?
-   Does the code actually do what you think it does?
-   In addition to what was done, is it clear *why* it was done?

. . .

**Long-term goals:**

-   Can the code be used for other data?
-   Can you extend the code to do other things?

## Toolkit for reproducibility

-   Scriptability $\rightarrow$ R
-   Literate programming (code, narrative, output in one place) $\rightarrow$ Quarto
-   Version control $\rightarrow$ Git / GitHub

# R and RStudio

## R and RStudio {.smaller}

::::: columns
::: {.column width="50%"}
![](images/r-logo.png){fig-alt="R logo" fig-align="center"}

-   R is an open-source statistical **programming language**
-   R is also an environment for statistical computing and graphics
-   It's easily extensible with *packages*
:::

::: {.column .fragment width="50%"}
![](images/rstudio-logo.png){fig-alt="RStudio logo"}

-   RStudio is a convenient interface for R called an **IDE** (integrated development environment), e.g. *"I write R code in the RStudio IDE"*
-   RStudio is not a requirement for programming with R, but it's very commonly used by R programmers and data scientists
:::
:::::

## R vs. RStudio

[![](images/r_vs_rstudio.png){fig-alt="On the left: a car engine. On the right: a car dashboard. The engine is labelled R. The dashboard is labelled RStudio." fig-align="center" width="1001"}](https://moderndive.com/1-getting-started.html)

::: aside
Source: [Modern Dive](https://moderndive.com/1-getting-started.html).
:::

## R packages

::: incremental
-   **Packages**: Fundamental units of reproducible R code, including reusable R functions, the documentation that describes how to use them, and sample data<sup>1</sup>

-   As of 8 January 2025, there are 21,879 R packages available on **CRAN** (the Comprehensive R Archive Network)<sup>2</sup>

-   We're going to work with a small (but important) subset of these!
:::

::: aside
<sup>1</sup> Wickham and Bryan, [R Packages](https://r-pkgs.org/).

<sup>2</sup> [CRAN contributed packages](https://cran.r-project.org/web/packages/).
:::

## Tour: R + RStudio {.smaller}

Sit back and enjoy the show.

## Tour recap: R + RStudio

![](images/tour-r-rstudio.png)

## A short list (for now) of R essentials

-   Functions are (most often) verbs, followed by what they will be applied to in parentheses:

```{r}
#| eval: false

do_this(to_this)
do_that(to_this, to_that, with_those)
```

. . .

-   Packages are installed with the `install.packages()` function and loaded with the `library` function, once per session:

```{r}
#| eval: false

install.packages("package_name")
library(package_name)
```

## R essentials (continued)

-   Columns (variables) in data frames are accessed with `$`:

```{r}
#| eval: false

dataframe$var_name
```

. . .

-   Object documentation can be accessed with `?`

```{r}
#| eval: false

?mean
```

## tidyverse

::::: columns
::: {.column width="50%"}
[![](images/tidyverse.png){fig-alt="Hex logos for dplyr, ggplot2, forcats, tibble, readr, stringr, tidyr, and purrr"}](https://tidyverse.org)
:::

::: {.column width="50%"}
[tidyverse.org](https://www.tidyverse.org/)

-   The **tidyverse** is an opinionated collection of R packages designed for data science
-   All packages share an underlying philosophy and a common grammar
:::
:::::

# Quarto

## Quarto

::: incremental
-   Fully reproducible reports -- each time you render the analysis is ran from the beginning
-   Code goes in chunks narrative goes outside of chunks
-   A visual editor for a familiar / Google docs-like editing experience
:::

## Tour: R, RStudio, and Quarto {.smaller}

-   Let's work through the first real Application Exercise

{{< fa laptop >}} `ae-01-meet-the-penguins`

## 

## Environments

::: callout-important
The environment of your Quarto document is separate from the Console!
:::

Remember this, and expect it to bite you a few times as you're learning to work with Quarto!

## Environments

::::::: columns
:::: {.column width="50%"}
First, run the following in the console:

```{r eval = FALSE}
x <- 2
x * 3
```

<br>

::: {.question .fragment}
All looks good, eh?
:::
::::

:::: {.column .fragment width="50%"}
Then, add the following in an R chunk in your Quarto document

```{r}
#| eval: false

x * 3
```

<br>

::: {.question .fragment}
What happens? Why the error?
:::
::::
:::::::

## How will we use Quarto?

-   Every application exercise, lab, project, etc. is an Quarto document
-   You'll always have a template Quarto document to start with
-   The amount of scaffolding in the template will decrease over the semester

## Tour recap: Quarto

## Tour: GitHub, Posit Cloud, and RStudio

-   See this [video](https://youtu.be/n0Hl8w8fIl0) for a detailed walk-through of how to retrieve and submit assignments using GitHub, Posit Cloud, and RStudio.

## What's with all the hexes?

![](images/hexes.jpeg){fig-alt="Hex logos for many packages" fig-align="center"}
