---
title: "Tidying data"
subtitle: "Lecture 6"
date: last-modified
date-format: long
format: 
  revealjs:
    footer: "[ðŸ”— renr213.github.io](https://renr213.github.io/)"
---

```{r}
library(tidyverse)
```

## Recap: pipe {.smaller}

-   The pipe operator passes what comes before it into the function that comes after it as the first argument in that function.

```{r}
sum(1, 2)
1 |> 
  sum(2)
```

-   Always use a line break after the pipe, and indent the next line of code.
    -   Just like always use a line break between layers of ggplots, after `+`, and indent the next line.

## Recap: logical operators {.smaller}

| operator | definition                   |
|:---------|:-----------------------------|
| `<`      | is less than?                |
| `<=`     | is less than or equal to?    |
| `>`      | is greater than?             |
| `>=`     | is greater than or equal to? |
| `==`     | is exactly equal to?         |
| `!=`     | is not equal to?             |

## Recap: logical operators {.smaller}

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `x & y`       | is x AND y?                                              |
| `x \| y`      | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

# Data tidying

## Tidy data

> "Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table."

Tidy Data, <https://vita.had.co.nz/papers/tidy-data.pdf>

. . .

**Note:** "easy to manipulate" = "straightforward to manipulate"

## Goal

Visualize StatSci majors over the years!

![](images/statsci-plot.png)

## Data {.smaller}

```{r}
#| message: false

statsci <- read_csv("../data/statsci.csv")
statsci
```

. . .

-   The first column (variable) is the `degree`, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major).

-   The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2023.

## Let's plan! {.smaller}

::: question
Take a look at the plot we aim to make and sketch the data frame we need to make the plot. Determine what each row and each column of the data frame should be. *Hint:* We need data to be in columns to map to `aes`thetic elements of the plot.
:::

# Application exercise

## `ae-05-majors-tidying`

::: appex
-  Accept the invitation to the application exercise.
-  Create a new project in RStudio from the GitHub repository
-   Open the `.qmd` file and render it.
:::

## Recap: pivoting {.smaller}

::: incremental
-   Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format
-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.
-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.
:::
