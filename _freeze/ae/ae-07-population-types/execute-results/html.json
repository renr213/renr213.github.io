{
  "hash": "1763f6157f5aa546e81b2491af0b274b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AE 07: Types and classes and populations\"\n---\n\n\n## Packages\n\nWe will use the following two packages in this application exercise.\n\n-   **tidyverse**: For data import, wrangling, and visualization.\n-   **scales**: For better axis labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n```\n:::\n\n\n## Type coercion\n\n-   **Demo:** Determine the type of the following vector. And then, change the type to numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"1\", \"2\", \"3\")\n\n# add code here\n```\n:::\n\n\n-   **Demo:** Once again, determine the type of the following vector. And then, change the type to numeric. What's different than the previous exercise?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(\"a\", \"b\", \"c\")\n\n# add code here\n```\n:::\n\n\n-   **Demo:** Once again, determine the type of the following vector. And then, change the type to numeric. What's different than the previous exercise?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- c(\"1\", \"2\", \"three\")\n\n# add code here\n```\n:::\n\n\n-   **Demo:** Suppose you conducted a survey where you asked people how many cars their household owns collectively. And the answers are as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_results <- tibble(cars = c(1, 2, \"three\"))\nsurvey_results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  cars \n  <chr>\n1 1    \n2 2    \n3 three\n```\n\n\n:::\n:::\n\n\nThis is annoying because of that third survey taker who just had to go and type out the number instead of providing as a numeric value.\nSo now you need to update the `cars` variable to be numeric.\nYou do the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\nAnd now things are even more annoying because you get a warning `NAs introduced by coercion` that happened while computing `cars = as.numeric(cars)` and the response from the third survey taker is now an `NA` (you lost their data).\nFix your `mutate()` call to avoid this warning.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn:** First, guess the type of the vector.\n    Then, check if you guessed right.\n    I've done the first one for you, you'll see that it's helpful to check the type of each element of the vector first.\n\n    -   `c(1, 1L, \"C\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(1, 1L, \"C\")\n\n# to help you guess\ntypeof(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(\"C\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# to check after you guess\ntypeof(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n```         \n-   `c(1L / 0, \"A\")`\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv2 <- c(1L / 0, \"A\")\n\n# to help you guess\ntypeof(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(1L / 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(\"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# to check after you guess\ntypeof(v2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n```         \n- `c(1:3, 5)`\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv3 <- c(1:3, 5)\n\n# to help you guess\n\n# add code here\n\n# to check after you guess\n\n# add code here\n```\n:::\n\n\n```         \n-   `c(3, \"3+\")`\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv4 <- c(3, \"3+\")\n\n# to help you guess\n\n# add code here\n\n# to check after you guess\n\n# add code here\n```\n:::\n\n\n```         \n-   `c(NA, TRUE)`\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv5 <- c(NA, TRUE)\n\n# to help you guess\n\n# add code here\n\n# to check after you guess\n\n# add code here\n```\n:::\n\n\n## Populations in continents\n\nIn the previous application exercise you joined two datasets (after a bit of data cleaning), and calculated total population in each continent and visualized it.\n\n-   First, you loaded the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinents <- read_csv(\"https://sta199-s24.github.io/data/continents.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 285 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): entity, code, continent\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\npopulation <- read_csv(\"https://sta199-s24.github.io/data/world-pop-2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 217 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (2): year, population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n-   Then you cleaned the country names where the spelling in one data frame didn't match the other, and joined the data sets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_continent <- population |>\n  mutate(country = case_when(\n    country == \"Congo, Dem. Rep.\" ~ \"Democratic Republic of Congo\",\n    country == \"Congo, Rep.\" ~ \"Congo\",\n    country == \"Hong Kong SAR, China\" ~ \"Hong Kong\",\n    country == \"Korea, Dem. People's Rep.\" ~ \"North Korea\",\n    country == \"Korea, Rep.\" ~ \"South Korea\",\n    country == \"Kyrgyz Republic\" ~ \"Kyrgyzstan\",\n    .default = country\n    )\n  ) |>\n  left_join(continents, by = join_by(country == entity))\n```\n:::\n\n\n-   Then, you calculated total population for each continent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_summary <- population_continent |>\n  group_by(continent) |>\n  summarize(total_pop = sum(population)) |>\n  arrange(desc(total_pop))\n```\n:::\n\n\n-   And finally, you visualized these data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(population_summary) +\n  geom_point(aes(x = total_pop, y = continent)) +\n  geom_segment(aes(y = continent, yend = continent, x = 0, xend = total_pop)) +\n  scale_x_continuous(labels = label_number(scale = 1/1000000, suffix = \" bil\")) +\n  theme_minimal() +\n  labs(\n    x = \"Total population\",\n    y = \"Continent\",\n    title = \"World population\",\n    subtitle = \"As of 2022\",\n    caption = \"Data sources: The World Bank and Our World in Data\"\n  )\n```\n\n::: {.cell-output-display}\n![](ae-07-population-types_files/figure-html/visualize-1.png){width=672}\n:::\n:::\n\n\n-   **Question:** Take a look at the visualization. How are the continents ordered? What would be a better order?\n\nAdd answer here.\n\n-   **Demo:** Reorder the continents on the y-axis (levels of `continent`) in order of value of total population. You will want to use a function from the **forcats** package, see <https://forcats.tidyverse.org/reference/index.html> for inspiration and help.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Think out loud:** Describe what is happening in the each step of the code chunk above.\n\nAdd answer here.\n",
    "supporting": [
      "ae-07-population-types_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}