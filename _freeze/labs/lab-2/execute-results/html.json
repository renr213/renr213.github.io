{
  "hash": "fc2b64a3a635f9659c7815b250b15e95",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 2: Data wrangling\"\neditor_options: \n  chunk_output_type: console\noutput: html\n---\n\n\n\n\n# Introduction\n\nIn this lab you'll continue to hone your data science workflow as well as bring together what you learned so far in the course (data visualization) with what's coming up (data wrangling).\n\n::: callout-note\nThis lab assumes you've completed [Lab 0](/labs/lab-0.html) and [Lab 1](/labs/lab-1.html) and doesn't repeat setup and overview content from those labs. If you have not yet done those, you should go back and review them before starting with this one.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Be able to create transform data using `dplyr`\n-   Build on your mastery of data visualizations using `ggplot2`\n-   Get more experience with data science workflow using R, RStudio, Git, and GitHub\n-   Further your reproducible authoring skills with Quarto\n-   Improve your familiarity with version control using Git and GitHub\n\n## Getting started\n\n### Getting started\n\n### Click on the invitation email to load the lab material into GitHub\n\n-   copy the URL from GitHub.\n\n### Log in to RStudio\n\n-   Go to <https://posit.cloud> and log into you RStudio instance.\n-   Create a new RStudio project from the GitHub repository.\n\n### First steps\n\nIn `lab-2.qmd`, update the `author` field to your name, render your document and examine the changes. Then, in the Git pane, click on **Diff** to view your changes, add a commit message (e.g., \"Added author name\"), and click **Commit**. Then, push the changes to your GitHub repository, and in your browser confirm that these changes have indeed propagated to your repository.\n\n::: callout-important\nIf you run into any issues with the first steps outlined above, contact the instructor for help before proceeding.\n:::\n\n## Packages\n\nIn this lab we will work with the **tidyverse** package, which is a collection of packages for doing data analysis in a \"tidy\" way.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n**Render** the document which loads this package with the `library()` function.\n\n::: callout-note\nRemember: The rendered document will include a message about which packages the tidyverse package is loading along with it. It's just R being informative, a **message** does not indicate anything is wrong (it's not a **warning** or an **error**).\n:::\n\n## Guidelines\n\nAs we've discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\n\nIn addition, the code should all the code should be be able to be read (not run off the page) when you render to PDF. Make sure that is the case, and add line breaks where the code is running off the page.[^1]\n\n[^1]: Remember, haikus not novellas when writing code!\n\n::: callout-note\nContinuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course. There will be periodic reminders in this assignment to remind you to **render, commit, and push** your changes to GitHub. You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n# Questions\n\n## Part 1\n\n**Back to the Midwest!**\n\nIn this part you will revisit and build on some of your findings from Lab 1, where you explored the `midwest` data frame. Remember that this data frame is bundled with the **ggplot2** package and is automatically loaded when you load the tidyverse package. As a refresher, the data contains demographic characteristics of counties in the Midwest region of the United States. You can read documentation for the data set, including variable definitions by typing `?midwest` in the Console or searching for `midwest` in the Help pane.\n\n### Question 1\n\nCalculate the number of counties in each state and display your results in descending order of number of counties. Which state has the highest number of counties, and how many? Which state has the lowest number, and how many?\n\n::: callout-note\nThe number of counties in a state can change over time, so the values you see in this output may not be true today.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 1\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 2\n\nWhile in a given state two counties can't have the same name, across states some county names might be shared. A classmate says \"Look at that, there is a county called \\_\\_\\_ in each state in this dataset!\" In a single pipeline, discover all counties that could fill in the blank. Your response should be a data frame with only the county names that could fill in the blank and how many times they appear in the data.\n\n::: callout-tip\nYou will want to use the `filter()` function in your answer, which requires a logical condition to describe what you want to filter for. For example `filter(x > 2)` means filter for values of `x` greater than 2, `filter(y <= 3)` means filter for values of y less than or equal to 3.\n\nThe table below is a summary of logical operators and how to articulate them in R.\n\n| operator      | definition                |\n|---------------|---------------------------|\n| `<`           | less than                 |\n| `<=`          | less than or equal to     |\n| `>`           | greater than              |\n| `>=`          | greater than or equal to  |\n| `==`          | exactly equal to          |\n| `!=`          | not equal to              |\n| `x & y`       | `x` AND `y`               |\n| `x` \\| `y`    | `x` OR `y`                |\n| `is.na(x)`    | test if `x` is `NA`       |\n| `!is.na(x)`   | test if `x` is not `NA`   |\n| `x %in% y`    | test if `x` is in `y`     |\n| `!(x %in% y)` | test if `x` is not in `y` |\n| `!x`          | not `x`                   |\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 2\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 3\n\nReturn to the following box plot of population densities where you were asked to identify at least one outlier.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/popdensity-boxplot-1.png){width=480}\n:::\n:::\n\n\n\n\nIn this question part, we want you to revisit this box plot and identify the counties described in each part.\n\na\\. The counties with a population density higher than 25,000. Your code must use the `filter()` function.\n\nb\\. The county with the highest population density. Your code must use the `max()` function.\n\nAnswer using a single data wrangling pipeline for each part. Your response should be a data frame five columns: county name, state name, population density, total population, and area, in this order. If your response has multiple rows, the data frame should be arranged in descending order of population density.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 3\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 4\n\nIn Lab 1 you were also asked to describe the distribution of population densities. The following is one acceptable description that touches on shape, center, and spread of this distribution. Calculate the values that should go into the blanks.\n\n> The distribution of population density of counties is unimodal and extremely right-skewed. A typical Midwestern county has population density of \\_\\_\\_\\_ people per unit area. The middle 50% of the counties have population densities between \\_\\_\\_ to \\_\\_\\_ people per unit area.\n\n::: callout-tip\nThink about which measures of center and spread are appropriate for skewed distributions.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 4\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 5\n\nAnother visualization from Lab 1 was the following that showed the proportion of urban counties in each state.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/metro-barplot-1.png){width=672}\n:::\n:::\n\n\n\n\nCalculate these proportions in a single data pipeline.\n\n::: callout-tip\nRemember, you'll first need to create a new variable called `metro` which takes on the value `Yes` if the value of `inmetro` is 1, and `No` otherwise. You can refer to [Lab 1](/labs/lab-1.html#question-6) if you need a refresher on how to do this.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 5\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 6\n\nReturn to the following scatter plot of percentage below poverty vs. percentage of people with a college degree, where the color and shape of points are determined by `state` where you were asked to identify at least one county that is a clear outlier by name.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-2_files/figure-html/percollege-percbelowpoverty-scatterplot-1.png){width=480}\n:::\n:::\n\n\n\n\na\\. In a single pipeline, identify the observations marked in the orange square on the upper left corner. Your answer should be a data frame with four variables: county, state, percentage below poverty, and percentage college educated.\n\nb\\. In a single pipeline, identify the observations marked in the red square in the plot above. Your answer should again be a data frame with four variables: county, state, percentage below poverty, and percentage college educated.\n\nc\\. Bring your answers from part (a) and part (b) together! In a single pipeline, and a single `filter()` statement, identify the observations marked in the red and orange square in the plot above. Your answer should again be a data frame with four variables: county, state, percentage below poverty, and percentage college educated.\n\nd\\. Create a new variable in `midwest` called `potential_outlier`. This variable should take on the value:\n\n-   `Yes` if the point is one the ones you identified in part (c), i.e., one of the points marked in the squares in the plot above.\n\n-   `No` otherwise.\n\nThen, display the updated `midwest` data frame, with county, state, percentage below poverty, percentage college educated, `potential_outlier` as the selected variables, arranged in ascending order of `potential_outlier`.\n\ne\\. Recreate the visualization above, i.e. a scatterplot of percentage below poverty vs. percentage of people with a college degree, however color the points by the newly created `potential_outlier` variable instead of state.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 6\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 7\n\na\\. In a single pipeline, calculate the total population for each state and save the resulting data frame as `state_population` and display it in descending order of total population.\n\nb\\. Then, in a separate pipeline, calculate the proportion of the total population in each state and, once again, display the results in descending order of proportion of population.\n\n::: callout-tip\nIn answering parts (a) and (b), you'll create two new variables, one for total population and other for proportion of total proportion. Make sure to give them \"reasonable\" names – short but evocative.\n:::\n\nc\\. Which Midwestern state is most populous and what percent of the Midwest population lives there? Which is the least populous and what percent lives there?\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 7\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 8\n\nCalculate the average percentage below poverty for each state and save the resulting data frame as `state_poverty` with the columns `state` and `mean_percbelowpoverty`.\n\nThen, in a new pipeline, display the `state_poverty` data frame in ascending order of `mean_percbelowpoverty`. Which state has the lowest average percentage below poverty across its counties? Which state has the highest average percentage below poverty across its counties?\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 8\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n## Part 2\n\n**All about `group_by()`!**\n\n### Question 9\n\nSuppose we have the following data frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  var_1 = c(10, 20, 30, 40, 50),\n  var_2 = c(\"Pizza\", \"Burger\", \"Pizza\", \"Pizza\", \"Burger\"),\n  var_3 = c(\"Apple\", \"Apple\", \"Pear\", \"Pear\", \"Banana\")\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  var_1 var_2  var_3 \n  <dbl> <chr>  <chr> \n1    10 Pizza  Apple \n2    20 Burger Apple \n3    30 Pizza  Pear  \n4    40 Pizza  Pear  \n5    50 Burger Banana\n```\n\n\n:::\n:::\n\n\n\n\na\\. What does the following code chunk do? Run it and analyze the result and articulate in words what `arrange()` does.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  arrange(var_2)\n```\n:::\n\n\n\n\nb\\. What does the following code chunk do? Run it and analyze the result and articulate in words what `group_by()` does. Also comment on how it's different from the `arrange()` in part (a)?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2)\n```\n:::\n\n\n\n\nc\\. What does the following code chunk do? Run it and analyze the result and articulate in words what the pipeline does.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\n\n\nd\\. What does the following code chunk do? Run it and analyze the result and articulate in words what the pipeline does. Then, comment on what the message says.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\n\n\ne\\. What does the following code chunk do? Run it and analyze the result and articulate in words what the pipeline does, especially mentioning what the `.groups` argument does. How is the output different from the one in part (d).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n```\n:::\n\n\n\n\nf\\. What do the following pipelines do? Run both and analyze their results and articulate in words what each pipeline does. How are the outputs of the two pipelines different?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n\ndf |>\n  group_by(var_2, var_3) |>\n  mutate(mean_var_1 = mean(var_1))\n```\n:::\n\n\n\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with an appropriate commit message.\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n# Wrap-up\n\n## Submission\n\nOnce you are finished with the lab, you will submit your final PDF document to Canvas.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all of your documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in a PDF file to Canvas by the submission deadline to be considered \"on time\".\n:::\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Canvas\n:::\n\nThe lab is graded out of a total of 36 points.\n\nYou can earn up to 4 points on each question:\n\n-   4: Response shows excellent understanding and addresses all or almost all of the rubric items.\n\n-   3: Response shows good understanding and addresses most of the rubric items.\n\n-   2: Response shows understanding and addresses a majority of the rubric items.\n\n-   1: Response shows effort and misses many of the rubric items.\n\n-   0: Response does not show sufficient effort or understanding and/or is largely incomplete.\n",
    "supporting": [
      "lab-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}