{
  "hash": "28de8abc0fd7671f72ee9089ff3076ca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 1 - Data visualization\"\nformat: html\n---\n\n\n\n\n# Introduction\n\nThis lab will introduce you to the course computing workflow. The main goal is to reinforce our demo of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface, commonly referred to as an integrated development environment or an IDE, for short.\n:::\n\nAn additional goal is to reinforce Git and GitHub, the version control, web hosting, and collaboration systems that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer. Before we get to that stage, however, you need to build some basic fluency in R. Today we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\n\n::: callout-warning\nThis lab assumes that you have already completed [Lab 0](/labs/lab-0.html). If you have not, please go back and do that first before proceeding.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Be familiar with the workflow using R, RStudio, Git, and GitHub\n-   Gain practice writing a reproducible report using Quarto\n-   Practice version control using Git and GitHub\n-   Be able to create data visualizations using `ggplot2`\n\n## Getting started\n\n### Click on the invitation email to load the lab material into GitHub\n\n-   copy the URL from GitHub.\n\n### Log in to RStudio\n\n-   Go to <https://posit.cloud> and log into you RStudio instance.\n-   Create a new RStudio project from the GitHub repository.\n\n### R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/lab-0/rstudio.png){fig-alt=\"RStudio IDE\"}\n\nBelow are the components of a Quarto (.qmd) file.\n\n![](images/lab-0/quarto.png){fig-alt=\"Quarto document\"}\n\n### YAML\n\nThe top portion of your R Markdown file (between the three dashed lines) is called **YAML**. It stands for \"YAML Ain't Markup Language\". It is a human friendly data representation for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n::: callout-important\nOpen the Quarto (`.qmd`) file in your project, change the author name to your name, and render the document. Examine the rendered document.\n:::\n\n### Committing changes\n\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\n\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here. Click on it to select it in this list and then click on **Diff**. This shows you the *diff*erence between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository. First, **stage** your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, \"updated author name\") in the **Commit message** box. Finally, click **Commit**. Note that every commit needs to have a commit message associated with it.\n\nYou don't have to commit after every change, as this would get quite tedious. You should commit states that are *meaningful to you* for inspection, comparison, or restoration.\n\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\n\nNow let's make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you're good to go!\n\n### Pushing changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\nIn order to push your changes to GitHub, you must have **staged** your **commit** to be pushed. click on **Push**.\n\n## Packages\n\nIn this lab we will work with the **tidyverse** package, which is a collection of packages for doing data analysis in a \"tidy\" way.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n**Render** the document which loads this package with the `library()` function.\n\n::: callout-note\nThe rendered document will include a message about which packages the tidyverse package is loading along with it. It's just R being informative, a **message** does not indicate anything is wrong (it's not a **warning** or an **error**).\n:::\n\nThe tidyverse is a meta-package. When you load it you get nine packages loaded for you:\n\n-   **dplyr**: for data wrangling\n-   **forcats**: for dealing with factors\n-   **ggplot2**: for data visualization\n-   **lubridate**: for dealing with dates\n-   **purrr**: for iteration with functional programming\n-   **readr**: for reading and writing data\n-   **stringr**: for string manipulation\n-   **tibble**: for modern, tidy data frames\n-   **tidyr**: for data tidying and rectangling\n\nThe message that's printed when you load the package tells you which versions of these packages are loaded as well as any conflicts they may have introduced, e.g., the `filter()` function from dplyr has now masked (overwritten) the `filter()` function available in base R (and that's ok, we'll use `dplyr::filter()` anyway).\n\nYou can now **Render** your template document and see the results.\n\n## Guidelines\n\nAs we've discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\n\nIn addition, the code should all the code should be be able to be read (not run off the page) when you render to PDF. Make sure that is the case, and add line breaks where the code is running off the page.[^1]\n\n[^1]: Remember, haikus not novellas when writing code!\n\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course. There will be periodic reminders in this assignment to remind you to **render, commit, and push** your changes to GitHub. You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n\n# Questions\n\n## Part 1\n\n**Let's take a trip to the Midwest!**\n\nWe will use the `midwest` data frame for this lab. It is part of the **ggplot2** R package, so the `midwest` data set is automatically loaded when you load the tidyverse package.\n\nThe data contains demographic characteristics of counties in the Midwest region of the United States.\n\nBecause the data set is part of the **ggplot2** package, you can read documentation for the data set, including variable definitions by typing `?midwest` in the Console or searching for `midwest` in the Help pane.\n\n### Question 1\n\nVisualize the distribution of population density of counties using a histogram with `geom_histogram()` with four separate binwidths: a binwidth of 100, a binwidth of 1,000, a binwidth of 10,000, and a binwidth of 100,000. For example, you can create the first plot with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(midwest, aes(x = popdensity)) +\n  geom_histogram(binwidth = 100) +\n  labs(\n    x = \"Population density\",\n    y = \"Count\",\n    title = \"Population density of midwesten counties\",\n    subtitle = \"Binwidth = 100\"\n  )\n```\n:::\n\n\n\n\nYou will need to make four different histograms. Make sure to set informative titles and axis labels for each of your plots. Then, comment on which binwidth is most appropriate for these data and why.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 1\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 2\n\nVisualize the distribution of population density of counties again, this time using a boxplot with `geom_boxplot()`. Make sure to set informative titles and axis labels for your plot. Then, using information as needed from the box plot as well as the histogram from Question 1, describe the distribution of population density of counties and comment on any potential outliers, making sure to identify at least one county that is a clear outlier by name in your narrative and commenting on whether it makes sense to you that this county is an outlier. You can use the data viewer to identify the outliers interactively, you do not have to write code to identify them.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 2\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 3\n\nCreate a scatterplot of the percentage below poverty (`percbelowpoverty` on the y-axis) versus percentage of people with a college degree (`percollege` on the x-axis), where the color [**and**]{.underline} shape of points are determined by `state`. Make sure to set informative titles, axis, and legend labels for your plot. First, describe the overall relationship between percentage of people with a college degree and percentage below poverty in Midwestern states, making sure to identify at least one county that is a clear outlier by name in your narrative. You can use the data viewer to identify the outliers interactively, you do not have to write code to identify them. Then, comment on whether you can identify how this relationship varies across states.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 3\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 4\n\nNow, let's examine the relationship between the same two variables, once again using different colors and shapes to represent each state, and using a separate plot for each state, i.e., with faceting with `facet_wrap()`. In addition to points (`geom_point()`), represent the data with a smooth curve fit to the data with `geom_smooth()`, with the argument `se = FALSE`. Make sure to set informative titles, axis, and legend labels for your plot. Which plot do you prefer - this plot or the plot in Question 3? Briefly explain your choice.\n\n::: callout-note\n`se = FALSE` removes the confidence bands around the line. These bands show the uncertainty around the smooth curve. We'll discuss uncertainty around estimates later in the course and bring these bands back then.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 4\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 5\n\n*Do some states have counties that tend to be geographically larger than others?*\n\nTo explore this question, create side-by-side boxplots of area (`area`) of a county based on state (`state`). How do typical county area sizes compare across states? How do variabilities of county sizes compare across states? Which state has the single largest county? Identify the name of this county. You can use the data viewer to identify it interactively, you do not have to write code.\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to GitHub with a meaningful commit message.\n\nOnce again, make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n### Question 6\n\n*Do some states have a higher percentage of their counties located in a metropolitan area?*\n\nCreate a segmented bar chart with one bar per state and the bar filled with colors according to the value of `metro` – one color indicating `Yes` and the other color indicating `No` for whether a county is considered to be a metro area. The y-axis of the segmented barplot should range from 0 to 1, indicating proportions. Compare the percentage of counties in metro areas across the states based on this plot. Make sure to supplement your narrative with rough estimates of these percentages.\n\n::: callout-tip\n## Hint\n\nFor this question, you should begin with the data wrangling pipeline below. We will learn more about data wrangling in the coming weeks, so this is a mini-preview. This pipeline creates a new variable called `metro` based on the value of the existing variable called `inmetro`. If the value of `inmetro` is equal to 1 (`inmetro == 1`), it sets the value of `metro` to `\"Yes\"`, and if not, it sets the value of `metro` to `\"No\"`. The resulting data frame is assigned back to `midwest`, overwriting the existing `midwest` data frame with a version that includes the new `metro` variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest <- midwest |>\n  mutate(metro = if_else(inmetro == 1, \"Yes\", \"No\"))\n```\n:::\n\n\n\n:::\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to GitHub with a meaningful commit message.\n\nAnd once again, make sure to commit and push all changed files so that your Git pane is empty afterward. We keep repeating this because it's important and because we see students forget to do this. So take a moment to make sure you're following along with the version control instructions.\n:::\n\n### Question 7\n\nRecreate the plot below, and then give it a title. Then, identify at least one county that is a clear outlier in Wisconsin (WI) by name. You can use the data viewer to identify them interactively, you do not have to write code. Comment on the population composition of this county by investigating the percentage of other races living there.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-tip\n## Hint\n\n-   [The `ggplot2` reference for themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) will be helpful in determining the theme.\n-   The `size` of the points is 2.\n-   The transparency (`alpha`) of the points is 0.5.\n-   You can put line breaks in labels with `\\n`.\n:::\n\n::: render-commit-push\nRender, commit, and push your final changes to GitHub with a meaningful commit message.\n\nMake sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n## Part 2\n\n**Enough about the Midwest!**\n\nIn this part we will use a new, more recent, and potentially more relevant dataset on counties in North Carolina.\n\nThis dataset is stored in a file called `nc-county.csv` in the `data` folder of your project/repository.\n\nYou can read this file into R with the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_county <- read_csv(\"data/nc-county.csv\")\n```\n:::\n\n\n\n\nThis will read the CSV (comma separated values) file from the `data` folder and store the dataset as a data frame called `nc_county` in R.\n\nThe variables in the dataset and their descriptions are as follows:\n\n-   `county`: Name of county.\n-   `state_abb`: State abbreviation (NC).\n-   `state_name`: State name (North Carolina).\n-   `land_area_m2`: Land area of county in square metres, based on the 2020 census.\n-   `land_area_mi2`: Land area of county in square miles, based on the 2020 census.\n-   `population`: Population of county, based on the 2020 census.\n-   `density`: Population density calculated as population divided by land area in square miles.\n\nIn addition to being more recent and more relevant, this dataset is also more complete in the sense that we know the units of population density: people per mile-squared!\n\n### Question 8\n\nFirst, guess what the relationship between population density and land area might be – positive? negative? no relationship?\n\nThen, make a scatter plot of population density (`density` on the y-axis) vs. land area in square miles (`land_area_mi2` on the x-axis). Make sure to set an informative title and axis labels for your plot. Describe the relationship. Was your guess correct?\n\n### Question 9\n\nNow make a scatter plot of population density (`density` on the y-axis) vs. land area in square metres (`land_area_m2` on the x-axis). Make sure to set an informative title and axis labels for your plot. Comment on how this scatterplot compares to the one in Exercise 8 — is the relationship displayed same or different. Explain why.\n\n# Wrap-up\n\n## Submission\n\nOnce you are finished with the lab, you will submit your final PDF document to Canvas.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all of your documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in a PDF file to the Canvas page by the submission deadline to be considered \"on time\".\n:::\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Canvas\n-   selected pages associated with each question on Canvas\n:::\n\n## Grading\n\nThe lab is graded out of a total of 36 points.\n\nYou can earn up to 4 points on each question:\n\n-   4: Response shows excellent understanding and addresses all or almost all of the rubric items.\n\n-   3: Response shows good understanding and addresses most of the rubric items.\n\n-   2: Response shows understanding and addresses a majority of the rubric items.\n\n-   1: Response shows effort and misses many of the rubric items.\n\n-   0: Response does not show sufficient effort or understanding and/or is largely incomplete.\n",
    "supporting": [
      "lab-1_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}