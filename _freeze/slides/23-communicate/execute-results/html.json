{
  "hash": "e68840e4561e0c232c926201c759be7d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Communicating data science results effectively\"\nsubtitle: \"Lecture 23\"\ndate: \"April 17, 2024\"\nformat: \n  revealjs:\n    footer: \"[üîó sta199-s24.github.io](https://sta199-s24.github.io/) &nbsp;¬∑&nbsp; [‚ùì Ask on Ed](https://edstem.org/us/courses/50730)\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Warm up\n\n\n::: {.cell}\n\n:::\n\n\n# Warm up\n\n## Announcements {.smaller}\n\n-   My office hours this week: Office hours today 1:30 - 2:30 pm today\n\n-   Remaining due dates:\n\n    ::: incremental\n    -   Project presentations next Monday in lab -- all team members must be present.\n\n    -   Project write-up and final repo due 11:59pm Mon, April 22 -- you will lose access to your repo at this time.\n\n    -   Remaining application exercises due on the usual schedule.\n    :::\n\n## Project\n\n-   Review peer evaluations left by your peers, implement updates as you see fit, close the issue once you review them.\n\n-   Have a clear plan for who is doing what, open issues on your repo, and assign them to individuals who can then close the issues as they finish a task.\n\n-   Schedule at least one team meting between today and your presentation to practice your presentation together.\n\n# Effective communication\n\n## What's going on in this plot?\n\n![](images/24/covid-plot.png){fig-align=\"center\"}\n\n## Take A Sad Plot & Make It Better\n\n![](images/24/sad-plot-to-better.gif)\n\nSource: [https://alison.netlify.app/rlm-sad-plot-better](alison.netlify.app/rlm-sad-plot-better)\\\n\n# Application exercise\n\n## `ae-20`\n\n::: appex\n-   Go to the course [GitHub org](https://github.com/sta199-f22-1) and find your `ae-20` (repo name will be suffixed with your GitHub name).\n-   Clone the repo in your container, open the Quarto document in the repo, and follow along and complete the exercises.\n-   You should have already pushed updates on Tuesday, so you should be good for submission.\n:::\n\n## Recap {.smaller}\n\n::: incremental\n-   Represent percentages as parts of a whole\n-   Place variables representing time on the x-axis when possible\n-   Pay attention to data types, e.g., represent time as time on a continuous scale, not years as levels of a categorical variable\n-   Prefer direct labeling over legends\n-   Use accessible colors\n-   Use color to draw attention\n-   Pick a purpose and label, color, annotate for that purpose\n-   Communicate your main message directly in the plot labels\n-   Simplify before you call it done (a.k.a. \"Before you leave the house, look in the mirror and take one thing off\")\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}