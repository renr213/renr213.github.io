{
  "hash": "76ad27fd329929ee84a042e7b1479394",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Joining data\"\nsubtitle: \"Lecture 7\"\ndate: \"February 6, 2024\"\nformat: \n  revealjs:\n    footer: \"[üîó sta199-s24.github.io](https://sta199-s24.github.io/) &nbsp;¬∑&nbsp; [‚ùì Ask on Ed](https://edstem.org/us/courses/50730)\"\n---\n\n\n\n\n\n\n# Warm up\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## While you wait for class to begin...\n\n-   Go to your `ae` repo, click *Pull* to get today's application exercise to get ready for later.\n\n-   Questions from the prepare materials?\n\n\n\n\n\n\n    ```{=html}\n    <iframe allowfullscreen frameborder=\"0\" height=\"100%\" mozallowfullscreen style=\"min-width: 500px; min-height: 355px\" src=\"https://app.wooclap.com/STA199S24?from=status-bar?\" width=\"100%\"></iframe>\n    ```\n\n\n\n\n\n\n## Announcements\n\n-   Exam 1 in class next week on Thursday ‚Äì cheat sheet (1 page, both sides, hand-written or typed, must be prepared by you)\n-   Exam 1 take home starts after class on Thursday, due at 8 am on Monday (open resources, internet, etc., closed to other humans)\n-   Next week in lab: Exam 1 review ‚Äì come with questions!\n-   No new lab assigned next week during exam\n\n## Study tips for the exam\n\n-   Go over lecture materials and application exercises\n-   Review labs and feedback you've received so far\n-   Do the exercises at the end of readings from both books\n-   Do the exam review over (to be posted on Friday)\n-   Go to lab on Monday with questions\n\n## Questions from last time {.smaller}\n\n**Is there a limit to a tibble size?**\n\nNo, a tibble (i.e., a data frame) can be any number of rows or columns.\nHowever when you print it, it will only print the first 10 rows and the columns that fit across the screen, document, etc.\n\nIf you want to see more rows and columns, you can\n\n-   open it in the data viewer with `view(df)`\n\n-   explicitly print more rows with, e.g., `df |> print(n = 25)`\n\n-   explicitly `select()` or `relocate()` columns\n\n## Options for a tibble {.smaller}\n\n::: panel-tabset\n## Default\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nmidwest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 437 √ó 28\n     PID county   state  area poptotal popdensity popwhite popblack popamerindian popasian\n   <int> <chr>    <chr> <dbl>    <int>      <dbl>    <int>    <int>         <int>    <int>\n 1   561 ADAMS    IL    0.052    66090      1271.    63917     1702            98      249\n 2   562 ALEXAND‚Ä¶ IL    0.014    10626       759      7054     3496            19       48\n 3   563 BOND     IL    0.022    14991       681.    14477      429            35       16\n 4   564 BOONE    IL    0.017    30806      1812.    29344      127            46      150\n 5   565 BROWN    IL    0.018     5836       324.     5264      547            14        5\n 6   566 BUREAU   IL    0.05     35688       714.    35157       50            65      195\n 7   567 CALHOUN  IL    0.017     5322       313.     5298        1             8       15\n 8   568 CARROLL  IL    0.027    16805       622.    16519      111            30       61\n 9   569 CASS     IL    0.024    13437       560.    13384       16             8       23\n10   570 CHAMPAI‚Ä¶ IL    0.058   173025      2983.   146506    16559           331     8033\n# ‚Ñπ 427 more rows\n# ‚Ñπ 18 more variables: popother <int>, percwhite <dbl>, percblack <dbl>,\n#   percamerindan <dbl>, percasian <dbl>, percother <dbl>, popadults <int>,\n#   perchsd <dbl>, percollege <dbl>, percprof <dbl>, poppovertyknown <int>,\n#   percpovertyknown <dbl>, percbelowpoverty <dbl>, percchildbelowpovert <dbl>,\n#   percadultpoverty <dbl>, percelderlypoverty <dbl>, inmetro <int>, category <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `print()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest |>\n  print(n = 13)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 437 √ó 28\n     PID county   state  area poptotal popdensity popwhite popblack popamerindian popasian\n   <int> <chr>    <chr> <dbl>    <int>      <dbl>    <int>    <int>         <int>    <int>\n 1   561 ADAMS    IL    0.052    66090      1271.    63917     1702            98      249\n 2   562 ALEXAND‚Ä¶ IL    0.014    10626       759      7054     3496            19       48\n 3   563 BOND     IL    0.022    14991       681.    14477      429            35       16\n 4   564 BOONE    IL    0.017    30806      1812.    29344      127            46      150\n 5   565 BROWN    IL    0.018     5836       324.     5264      547            14        5\n 6   566 BUREAU   IL    0.05     35688       714.    35157       50            65      195\n 7   567 CALHOUN  IL    0.017     5322       313.     5298        1             8       15\n 8   568 CARROLL  IL    0.027    16805       622.    16519      111            30       61\n 9   569 CASS     IL    0.024    13437       560.    13384       16             8       23\n10   570 CHAMPAI‚Ä¶ IL    0.058   173025      2983.   146506    16559           331     8033\n11   571 CHRISTI‚Ä¶ IL    0.042    34418       819.    34176       82            51       89\n12   572 CLARK    IL    0.03     15921       531.    15842       10            26       36\n13   573 CLAY     IL    0.028    14460       516.    14403        4            17       29\n# ‚Ñπ 424 more rows\n# ‚Ñπ 18 more variables: popother <int>, percwhite <dbl>, percblack <dbl>,\n#   percamerindan <dbl>, percasian <dbl>, percother <dbl>, popadults <int>,\n#   perchsd <dbl>, percollege <dbl>, percprof <dbl>, poppovertyknown <int>,\n#   percpovertyknown <dbl>, percbelowpoverty <dbl>, percchildbelowpovert <dbl>,\n#   percadultpoverty <dbl>, percelderlypoverty <dbl>, inmetro <int>, category <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `select()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest |>\n  select(county, state, percbelowpoverty, percollege)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 437 √ó 4\n   county    state percbelowpoverty percollege\n   <chr>     <chr>            <dbl>      <dbl>\n 1 ADAMS     IL               13.2        19.6\n 2 ALEXANDER IL               32.2        11.2\n 3 BOND      IL               12.1        17.0\n 4 BOONE     IL                7.21       17.3\n 5 BROWN     IL               13.5        14.5\n 6 BUREAU    IL               10.4        18.9\n 7 CALHOUN   IL               15.1        11.9\n 8 CARROLL   IL               11.7        16.2\n 9 CASS      IL               13.9        14.1\n10 CHAMPAIGN IL               15.6        41.3\n# ‚Ñπ 427 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `relocate()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest |>\n  relocate(county, state, percbelowpoverty, percollege)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 437 √ó 28\n   county    state percbelowpoverty percollege   PID  area poptotal popdensity popwhite\n   <chr>     <chr>            <dbl>      <dbl> <int> <dbl>    <int>      <dbl>    <int>\n 1 ADAMS     IL               13.2        19.6   561 0.052    66090      1271.    63917\n 2 ALEXANDER IL               32.2        11.2   562 0.014    10626       759      7054\n 3 BOND      IL               12.1        17.0   563 0.022    14991       681.    14477\n 4 BOONE     IL                7.21       17.3   564 0.017    30806      1812.    29344\n 5 BROWN     IL               13.5        14.5   565 0.018     5836       324.     5264\n 6 BUREAU    IL               10.4        18.9   566 0.05     35688       714.    35157\n 7 CALHOUN   IL               15.1        11.9   567 0.017     5322       313.     5298\n 8 CARROLL   IL               11.7        16.2   568 0.027    16805       622.    16519\n 9 CASS      IL               13.9        14.1   569 0.024    13437       560.    13384\n10 CHAMPAIGN IL               15.6        41.3   570 0.058   173025      2983.   146506\n# ‚Ñπ 427 more rows\n# ‚Ñπ 19 more variables: popblack <int>, popamerindian <int>, popasian <int>,\n#   popother <int>, percwhite <dbl>, percblack <dbl>, percamerindan <dbl>,\n#   percasian <dbl>, percother <dbl>, popadults <int>, perchsd <dbl>, percprof <dbl>,\n#   poppovertyknown <int>, percpovertyknown <dbl>, percchildbelowpovert <dbl>,\n#   percadultpoverty <dbl>, percelderlypoverty <dbl>, inmetro <int>, category <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n## From last time: pivoting {.smaller}\n\n::: incremental\n-   Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format\n-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.\n-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.\n:::\n\n# Joining datasets\n\n## Why join? {.smaller}\n\nSuppose we want to answer questions like:\n\n> Is there a relationship between\\\n> - number of QS courses taken\\\n> - having scored a 4 or 5 on the AP stats exam\\\n> - motivation for taking course\\\n> - ...\\\n> and performance in this course?\"\n\n. . .\n\nEach of these would require *join*ing class performance data with an outside data source so we can have all relevant information (columns) in a single data frame.\n\n## Setup\n\nFor the next few slides...\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n  )\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n  )\n\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n     id value_y\n  <dbl> <chr>  \n1     1 y1     \n2     2 y2     \n3     4 y4     \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n## `left_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/left-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n## `right_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/right-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n## `full_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/full-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 √ó 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n4     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n## `inner_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/inner-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n## `semi_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/semi-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n## `anti_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/anti-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 2\n     id value_x\n  <dbl> <chr>  \n1     3 x3     \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n# Example: Passenger capacity\n\n## `nycflights13` & airport capacity {.smaller}\n\nYou've previously seen the `flights` data available in the `nycflights13` package which details all flights from one of the 3 major NYC airports in 2013.\n\nToday we would like to answer a specific question:\n\n::: question\nWhat was the passenger capacity (i.e., maximum number of passengers) that could have flown out of the three airports in 2013?\n:::\n\n. . .\n\nTo answer this we will need to know how many passenger seats each plane had available - each flight record has a `tailnum` which is a unique identifier for the plane, this can be linked to the `planes` data set which has the number of available seats for each plane.\n\n## Attempt 1\n\n\n\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(nycflights13)\n\nleft_join(flights, planes) |>\n  group_by(origin) |>\n  summarize(capacity = sum(seats))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  origin capacity\n  <chr>     <int>\n1 EWR          NA\n2 JFK          NA\n3 LGA          NA\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Attempt 2\n\n\n\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(flights, planes) |>\n  group_by(origin) |>\n  summarize(capacity = sum(seats, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  origin capacity\n  <chr>     <int>\n1 EWR      345268\n2 JFK      179412\n3 LGA       89686\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Attempt 3\n\n\n\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nleft_join(\n  flights, planes,\n  by = c(\"tailnum\" = \"tailnum\")\n) |>\n  group_by(origin) |>\n  summarize(capacity = sum(seats, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  origin capacity\n  <chr>     <int>\n1 EWR    14454251\n2 JFK    13874081\n3 LGA    10522985\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Application exercise\n\n## Goal\n\nMake a bar plot of total populations of continents, where the input data are:\n\n1.  Countries and populations\n2.  Countries and continents\n\n## `ae-06-population-joining`\n\n::: appex\n-   Go to the project navigator in RStudio (top right corner of your RStudio window) and open the project called `ae`.\n\n-   If there are any uncommitted files, commit them, and then click **Pull**.\n\n-   Open the file called `ae-06-population-joining.qmd` and render it.\n:::\n",
    "supporting": [
      "07-joining-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}