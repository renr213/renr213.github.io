{
  "hash": "05cd5b239308f0ae8437388edee9313d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data types and classes\"\nsubtitle: \"Lecture 8\"\ndate: \"February 8, 2024\"\nformat: \n  revealjs:\n    footer: \"[üîó sta199-s24.github.io](https://sta199-s24.github.io/) &nbsp;¬∑&nbsp; [‚ùì Ask on Ed](https://edstem.org/us/courses/50730)\"\n---\n\n\n\n\n\n\n# Warm up\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## While you wait for class to begin...\n\n-   Go to your `ae` repo, click *Pull* to get today's application exercise to get ready for later.\n\n-   Questions from the prepare materials?\n\n\n\n\n\n\n    ```{=html}\n    <iframe allowfullscreen frameborder=\"0\" height=\"100%\" mozallowfullscreen style=\"min-width: 500px; min-height: 355px\" src=\"https://app.wooclap.com/STA199S24?from=status-bar?\" width=\"100%\"></iframe>\n    ```\n\n\n\n\n\n\n# Questions from last time\n\n## **Pivoting data** {.smaller}\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose we have the following patient data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 4\n  patient_id pulse_1 pulse_2 pulse_3\n  <chr>        <dbl>   <dbl>   <dbl>\n1 XYZ             70      85      73\n2 ABC             90      95     102\n3 DEF            100      80      70\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAnd we want to know:\n\n-   Average pulse rate for each patient.\n\n-   Trends in pulse rates across measurements.\n\n## **Pivoting data** {.smaller}\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose we have the following patient data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 4\n  patient_id pulse_1 pulse_2 pulse_3\n  <chr>        <dbl>   <dbl>   <dbl>\n1 XYZ             70      85      73\n2 ABC             90      95     102\n3 DEF            100      80      70\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAnd we want to know:\n\n-   Average pulse rate for each patient.\n\n-   Trends in pulse rates across measurements.\n\nThese require a *longer* format of the data where all pulse rates are in a single column and another column identifies the measurement number.\n\n## Pivoting data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients_longer <- patients |>\n  pivot_longer(\n    cols = !patient_id,\n    names_to = \"measurement\",\n    values_to = \"pulse_rate\"\n  )\n```\n:::\n\n\n\n\n\n\n## Summarizing pivoted data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients_longer |>\n  group_by(patient_id) |>\n  summarize(mean_pulse = mean(pulse_rate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 √ó 2\n  patient_id mean_pulse\n  <chr>           <dbl>\n1 ABC              95.7\n2 DEF              83.3\n3 XYZ              76  \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Visualizing pivoted data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  patients_longer, \n  aes(x = measurement, y = pulse_rate, group = patient_id, color = patient_id)\n  ) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](08-data-types-classes_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n# Types and classes\n\n## Types and classes\n\n-   Type is how an object is stored in memory, e.g.,\n\n    -   `double`: a real number stored in double-precision floatint point format.\n    -   `integer`: an integer (positive or negative)\n\n-   Class is metadata about the object that can determine how common functions operate on that object, e.g.,\n\n    -   `factor`\n\n## Types of vectors\n\n::: columns\n::: {.column width=\"50%\"}\nYou'll commonly encounter:\n\n-   `logical`\n-   `integer`\n-   `double`\n-   `character`\n:::\n\n::: {.column width=\"50%\"}\nYou'll less commonly encounter:\n\n-   `list`\n-   `NULL`\n-   `complex`\n-   `raw`\n:::\n:::\n\n## Types of functions\n\nYes, functions have types too, but you don't need to worry about the differences in the context of doing data science.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mean) # regular function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"closure\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(`$`) # internal function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"special\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(sum) # primitive function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"builtin\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Factors {.smaller}\n\nA `factor` is a vector that can contain only predefined values.\nIt is used to store categorical data.\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b b a\nLevels: a b\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$levels\n[1] \"a\" \"b\"\n\n$class\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/08/factor.png){fig-align=\"center\" width=\"400\"}\n:::\n:::\n\n## Other classes\n\nJust a couple of examples...\n\n::: columns\n::: {.column width=\"50%\"}\nDate:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday <- Sys.Date()\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-10-07\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\nDate-time:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnow <- as.POSIXct(\"2024-02-08 11:45\", tz = \"EST\")\nnow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-02-08 11:45:00 EST\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"EST\"\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n:::\n\n# Application exercise\n\n## `ae-07-population-types`\n\n::: appex\n-   Go to the project navigator in RStudio (top right corner of your RStudio window) and open the project called `ae`.\n\n-   If there are any uncommitted files, commit them, and then click **Pull**.\n\n-   Open the file called `ae-07-population-types.qmd` and render it.\n:::\n",
    "supporting": [
      "08-data-types-classes_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}