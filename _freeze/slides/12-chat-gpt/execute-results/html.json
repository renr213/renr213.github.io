{
  "hash": "4fefc80ccf6b5236b0d921f3a555507b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Web scraping wrap-up + Chat GPT\"\nsubtitle: \"Lecture 12\"\ndate: \"February 27, 2024\"\nformat: \n  revealjs:\n    footer: \"[üîó sta199-s24.github.io](https://sta199-s24.github.io/) &nbsp;¬∑&nbsp; [‚ùì Ask on Ed](https://edstem.org/us/courses/50730)\"\n---\n\n\n\n\n\n\n# Warm up\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## While you wait for class to begin...\n\n::: nonincremental\n-   Open your `lab-4` project, save and commit any pending changes, and push them to GitHub\n-   Any questions from prepare materials?\n:::\n\n\n\n\n\n\n```{=html}\n<iframe allowfullscreen frameborder=\"0\" height=\"100%\" mozallowfullscreen style=\"min-width: 500px; min-height: 355px\" src=\"https://app.wooclap.com/STA199S24?from=status-bar?\" width=\"100%\"></iframe>\n```\n\n\n\n\n\n## Announcements\n\n-   Fill out TEAMMATES survey to provide feedback to your teammates (and to let us know how things are going)\n-   Fill out the (optional) midterm course evaluation\n-   A note on AE scores -- they will continue to be updated!\n-   Yet another survey: The Campus Culture Survey ‚Äì UG participation is very low, help lift it up!\n\n## Lab 4 update\n\n**Pull** changes, see that Question 1 in `lab-4.qmd` is updated with the following code chunk:\n\n```{{r}}\n#| file: lab-4-clubs-scrape.R\n#| eval: false\n```\n\nRender `lab-4.qmd` and commit and push your changes.\n\n# From last time -- Application exercise\n\n## Goal\n\n::: columns\n::: {.column width=\"50%\"}\n-   Scrape data and organize it in a tidy format in R\n-   Perform light text parsing to clean data\n-   Summarize and visualize the data\n:::\n\n::: {.column width=\"50%\"}\n![](images/chronicle-data.png){fig-align=\"center\"}\n:::\n:::\n\n## `ae-09`\n\n::: appex\n-   Go to the project navigator in RStudio (top right corner of your RStudio window) and open the project called ae.\n-   If there are any uncommitted files, commit them, and then click Pull.\n-   Open the file called `chronicle-scrape.R` and follow along.\n:::\n\n## Recap\n\n-   Use the SelectorGadget identify tags for elements you want to grab\n-   Use rvest to first read the whole page (into R) and then parse the object you've read in to the elements you're interested in\n-   Put the components together in a data frame (a tibble) and analyze it like you analyze any other data\n\n## A new R workflow {.smaller}\n\n-   When working in a Quarto document, your analysis is re-run each time you knit\n\n-   If web scraping in a Quarto document, you'd be re-scraping the data each time you knit, which is undesirable (and not *nice*)!\n\n-   An alternative workflow:\n\n    -   Use an R script to save your code\n    -   Saving interim data scraped using the code in the script as CSV or RDS files\n    -   Use the saved data in your analysis in your Quarto document\n\n# Web scraping considerations\n\n## Ethics: \"Can you?\" vs \"Should you?\"\n\n![](images/ok-cupid-1.png){fig-align=\"center\" width=\"800\"}\n\n::: aside\nSource: Brian Resnick, [Researchers just released profile data on 70,000 OkCupid users without permission](https://www.vox.com/2016/5/12/11666116/70000-okcupid-users-data-release), Vox.\n:::\n\n## \"Can you?\" vs \"Should you?\"\n\n![](images/ok-cupid-2.png){fig-align=\"center\" width=\"699\"}\n\n## Challenges: Unreliable formatting\n\n![](images/unreliable-formatting.png){fig-align=\"center\" width=\"699\"}\n\n::: aside\n[alumni.duke.edu/news/notable-alumni](https://alumni.duke.edu/news/notable-alumni)\n:::\n\n## Challenges: Data broken into many pages\n\n![](images/many-pages.png){fig-align=\"center\"}\n\n## Workflow: Screen scraping vs. APIs\n\nTwo different scenarios for web scraping:\n\n-   Screen scraping: extract data from source code of website, with html parser (easy) or regular expression matching (less easy)\n\n-   Web APIs (application programming interface): website offers a set of structured http requests that return JSON or XML files\n\n## Workflow: Scraping from many pages {.smaller}\n\n-   So far you've learned to scrape data from a single page\n\n-   If you wanted to scrape data from multiple, similarly structured web pages (e.g., scrape the text and other metadata for each opinion article on The Chronicle):\n\n    -   Write the code to scrape one page\n\n    -   Turn it into a function that takes the webpage URL as an argument and returns the scraped, structured data\n\n    -   Map the function over the list of URLs of interest\n\n# The üêò in the room: Chat GPT\n\n## Using Chat GPT\n\n::: question\nHow are you using Chat GPT for this class?\n:::\n\n## Example 1 - From Lab 4 {.smaller}\n\n::: question\nAnother variable that needs some cleaning up is `membership_status`.\nCurrently it should either be `NA` or contain some text that says `\"Select ... to register for this group\"`.\nRecode this variable to say `\"Closed\"` if the current value is `NA` or `\"Open\"` otherwise.\nSave the resulting dataset with these two new variables as `clubs`, i.e., overwrite the data frame.\n\nThen, display the first 10 rows of the dataset, `relocate()`ing `membership_status` to the beginning of the dataset to make sure it appears in the output in your rendered document.\n:::\n\n## Sample data {.xsmall}\n\n\n\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~club, ~membership_status,\n  1, \"Select AI Competition Club's group. Select the group and click on the Join button at the bottom of the page to register for this group\",\n  2, NA,\n  3, \"Select Black Pre-Law Society at Duke's group. Select the group and click on the Join button at the bottom of the page to register for this group\",\n  4, NA,\n  5, NA,\n  6, \"Select Duke Women's Flag Football Team's group. Select the group and click on the Join button at the bottom of the page to register for this group\",\n  7, NA,\n  8, NA,\n  9, NA,\n  10, \"Select Latino Medical Student Association's group. Select the group and click on the Join button at the bottom of the page to register for this group\",\n  11, NA,\n  12, \"Select Native American/Indigenous Student Alliance's group. Select the group and click on the Join button at the bottom of the page to register for this group\",\n  13, NA,\n  14, NA,\n  15, NA,\n  16, NA,\n  17, NA,\n  18, NA,\n  19, \"Select Society of Women Engineers's group. Select the group and click on the Join button at the bottom of the page to register for this group\",\n  20, NA,\n  21, NA\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 √ó 2\n    club membership_status                                                                \n   <dbl> <chr>                                                                            \n 1     1 Select AI Competition Club's group. Select the group and click on the Join butto‚Ä¶\n 2     2 <NA>                                                                             \n 3     3 Select Black Pre-Law Society at Duke's group. Select the group and click on the ‚Ä¶\n 4     4 <NA>                                                                             \n 5     5 <NA>                                                                             \n 6     6 Select Duke Women's Flag Football Team's group. Select the group and click on th‚Ä¶\n 7     7 <NA>                                                                             \n 8     8 <NA>                                                                             \n 9     9 <NA>                                                                             \n10    10 Select Latino Medical Student Association's group. Select the group and click on‚Ä¶\n# ‚Ñπ 11 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 1 prompt {.smaller}\n\n::: question\nWhat is wrong with this promopt?\n:::\n\n> Another variable that needs some cleaning up is `membership_status`.\n> Currently it should either be `NA` or contain some text that says `\"Select ... to register for this group\"`.\n> Recode this variable to say `\"Closed\"` if the current value is `NA` or `\"Open\"` otherwise.\n> Save the resulting dataset with these two new variables as `clubs`, i.e., overwrite the data frame.\n>\n> Then, display the first 10 rows of the dataset, `relocate()`ing `membership_status` to the beginning of the dataset to make sure it appears in the output in your rendered document.\n\n## Chat GPT - Take 1 response {.smaller}\n\n::: question\nExplain what the following code does.\n:::\n\n> Certainly!\n> To achieve this in R, you can follow these steps:\n>\n> ``` r\n> # Assuming your dataset is named 'clubs'\n> # Recode membership_status variable\n> clubs$membership_status <- ifelse(is.na(clubs$membership_status), \"Closed\", \"Open\")\n>\n> # Relocate membership_status to the beginning of the dataset\n> clubs <- clubs[c(\"membership_status\", setdiff(names(clubs), \"membership_status\"))]\n>\n> # Display the first 10 rows of the dataset\n> head(clubs, 10)\n> ```\n>\n> Make sure to replace 'clubs' with the actual name of your dataset.\n> This code will recode the `membership_status` variable as per your instructions, then move it to the beginning of the dataset and display the first 10 rows.\n\n## Chat GPT - Take 1 code {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming your dataset is named 'clubs'\n# Recode membership_status variable\nclubs$membership_status <- ifelse(is.na(clubs$membership_status), \"Closed\", \"Open\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'clubs' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# Relocate membership_status to the beginning of the dataset\nclubs <- clubs[c(\"membership_status\", setdiff(names(clubs), \"membership_status\"))]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'clubs' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display the first 10 rows of the dataset\nhead(clubs, 10)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'clubs' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 1 code + edit {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclubs <- df\n\n# Assuming your dataset is named 'clubs'\n# Recode membership_status variable\nclubs$membership_status <- ifelse(is.na(clubs$membership_status), \"Closed\", \"Open\")\n\n# Relocate membership_status to the beginning of the dataset\nclubs <- clubs[c(\"membership_status\", setdiff(names(clubs), \"membership_status\"))]\n\n# Display the first 10 rows of the dataset\nhead(clubs, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   membership_status  club\n   <chr>             <dbl>\n 1 Open                  1\n 2 Closed                2\n 3 Open                  3\n 4 Closed                4\n 5 Closed                5\n 6 Open                  6\n 7 Closed                7\n 8 Closed                8\n 9 Closed                9\n10 Open                 10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 2 prompt\n\n> Can you suggest an alternate solution in R?\n\n## Chat GPT - Take 2 response {.xsmall}\n\n::: question\nExplain what the following code does.\n:::\n\n> Certainly!\n> An alternate solution can use the `mutate` and `relocate` functions from the `dplyr` package.\n> Here's an alternative code:\n>\n> ``` r\n> library(dplyr)\n>\n> # Assuming your dataset is named 'clubs'\n> clubs <- clubs %>%\n>   mutate(membership_status = ifelse(is.na(membership_status), \"Closed\", \"Open\")) %>%\n>   relocate(membership_status, .before = 1)\n>\n> # Display the first 10 rows of the dataset\n> head(clubs, 10)\n> ```\n>\n> This code achieves the same result but uses the `mutate` function from the `dplyr` package for variable recoding and the `relocate` function to move the `membership_status` variable to the beginning of the dataset.\n> Make sure to replace 'clubs' with the actual name of your dataset.\n\n## Chat GPT - Take 2 code {.smaller}\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Assuming your dataset is named 'clubs'\nclubs <- clubs %>%\n  mutate(membership_status = ifelse(is.na(membership_status), \"Closed\", \"Open\")) %>%\n  relocate(membership_status, .before = 1)\n\n# Display the first 10 rows of the dataset\nhead(clubs, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   membership_status  club\n   <chr>             <dbl>\n 1 Open                  1\n 2 Closed                2\n 3 Open                  3\n 4 Closed                4\n 5 Closed                5\n 6 Open                  6\n 7 Closed                7\n 8 Closed                8\n 9 Closed                9\n10 Open                 10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 3 prompt\n\n> Can you suggest a tidyverse-based solution?\n\n## Chat GPT - Take 3 response {.xsmall}\n\n> Certainly!\n> If you want to stick to the tidyverse, you can use the `mutate` and `slice_head` functions from the `dplyr` package along with the `forcats` package for factor manipulation.\n> Here's a tidyverse-based solution:\n>\n> ``` r\n> library(dplyr)\n> library(forcats)\n>\n> # Assuming your dataset is named 'clubs'\n> clubs <- clubs %>%\n>   mutate(membership_status = fct_recode(membership_status, Closed = \"NA\", Open = \"Select ... to register for this group\")) %>%\n>   slice_head(n = 10) %>%\n>   relocate(membership_status, .before = 1)\n>\n> # Display the first 10 rows of the dataset\n> clubs\n> ```\n>\n> This code uses `fct_recode` from the `forcats` package to recode the levels of the `membership_status` variable.\n> The `slice_head` function is then used to select the first 10 rows, and `relocate` is used to move the `membership_status` variable to the beginning of the dataset.\n> Make sure to replace 'clubs' with the actual name of your dataset.\n\n## Chat GPT - Take 3 code {.xsmall}\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(forcats)\n\n# Assuming your dataset is named 'clubs'\nclubs <- clubs %>%\n  mutate(membership_status = fct_recode(membership_status, Closed = \"NA\", Open = \"Select ... to register for this group\")) %>%\n  slice_head(n = 10) %>%\n  relocate(membership_status, .before = 1)\n\n# Display the first 10 rows of the dataset\nclubs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   membership_status                                                                  club\n   <fct>                                                                             <dbl>\n 1 Select AI Competition Club's group. Select the group and click on the Join butto‚Ä¶     1\n 2 <NA>                                                                                  2\n 3 Select Black Pre-Law Society at Duke's group. Select the group and click on the ‚Ä¶     3\n 4 <NA>                                                                                  4\n 5 <NA>                                                                                  5\n 6 Select Duke Women's Flag Football Team's group. Select the group and click on th‚Ä¶     6\n 7 <NA>                                                                                  7\n 8 <NA>                                                                                  8\n 9 <NA>                                                                                  9\n10 Select Latino Medical Student Association's group. Select the group and click on‚Ä¶    10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 4 prompt\n\n> The text \"Select ... to register for this group\" can vary for each group.\n> For example, it can be \"\"Select blah blah to register for this group\" or it can be \"Select la di da to register for this group\". Can you suggest a tidyverse-based solution that would capture all of possible options for the ... in this text?\n\n## Chat GPT - Take 4 response {.xsmall}\n\n::: question\nExplain what the following code does.\n:::\n\n> Certainly!\n> If the text \"Select ... to register for this group\" varies for each group, you can use the `str_detect` function from the `stringr` package to identify those cases.\n> Here's a tidyverse-based solution:\n>\n> ``` r\n> library(dplyr)\n> library(stringr)\n>\n> # Assuming your dataset is named 'clubs'\n> clubs <- clubs %>%\n>   mutate(membership_status = ifelse(str_detect(membership_status, \"Select .* to register for this group\"), \"Open\", \"Closed\")) %>%\n>   relocate(membership_status, .before = 1)\n>\n> # Display the first 10 rows of the dataset\n> head(clubs, 10)\n> ```\n>\n> This code uses `str_detect` to check if the `membership_status` contains the pattern \"Select ... to register for this group\".\n> If it does, it sets the status to \"Open\"; otherwise, it sets it to \"Closed\".\n> Make sure to replace 'clubs' with the actual name of your dataset.\n\n## Chat GPT - Take 4 code {.smaller}\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(stringr)\n\n# Assuming your dataset is named 'clubs'\nclubs <- clubs %>%\n  mutate(membership_status = ifelse(str_detect(membership_status, \"Select .* to register for this group\"), \"Open\", \"Closed\")) %>%\n  relocate(membership_status, .before = 1)\n\n# Display the first 10 rows of the dataset\nhead(clubs, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   membership_status  club\n   <chr>             <dbl>\n 1 Open                  1\n 2 <NA>                  2\n 3 Open                  3\n 4 <NA>                  4\n 5 <NA>                  5\n 6 Open                  6\n 7 <NA>                  7\n 8 <NA>                  8\n 9 <NA>                  9\n10 Open                 10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 5 prompt\n\n::: question\nWhat is different about this prompt?\n:::\n\n> Let's try again.\n> Can you write a tidyverse-based solution where membership status is recoded as Closed if the current value is NA and Open if the current value is anything else.\n> Then, using the relocate() function, the membership status is moved to be the first column in the output.\n\n## Chat GPT - Take 5 response {.xsmall}\n\n::: question\nExplain what the following code does.\n:::\n\n> Certainly!\n> My apologies for the confusion.\n> Here's a tidyverse-based solution that recodes the membership status and moves it to be the first column using the `dplyr` package:\n>\n> ``` r\n> library(dplyr)\n>\n> # Assuming your dataset is named 'clubs'\n> clubs <- clubs %>%\n>   mutate(membership_status = if_else(is.na(membership_status), \"Closed\", \"Open\")) %>%\n>   relocate(membership_status, .before = 1)\n>\n> # Display the first 10 rows of the dataset\n> head(clubs, 10)\n> ```\n>\n> This code uses the `mutate` function to recode `membership_status` as \"Closed\" if it's NA and \"Open\" otherwise.\n> Then, the `relocate` function is used to move `membership_status` to be the first column in the dataset.\n> Make sure to replace 'clubs' with the actual name of your dataset.\n\n## Chat GPT - Take 5 code {.xsmall}\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Assuming your dataset is named 'clubs'\nclubs <- clubs %>%\n  mutate(membership_status = if_else(is.na(membership_status), \"Closed\", \"Open\")) %>%\n  relocate(membership_status, .before = 1)\n\n# Display the first 10 rows of the dataset\nhead(clubs, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 √ó 2\n   membership_status  club\n   <chr>             <dbl>\n 1 Open                  1\n 2 Closed                2\n 3 Open                  3\n 4 Closed                4\n 5 Closed                5\n 6 Open                  6\n 7 Closed                7\n 8 Closed                8\n 9 Closed                9\n10 Open                 10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 5 code + edit {.smaller}\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclubs |>\n  mutate(membership_status = if_else(is.na(membership_status), \"Closed\", \"Open\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 √ó 2\n    club membership_status\n   <dbl> <chr>            \n 1     1 Open             \n 2     2 Closed           \n 3     3 Open             \n 4     4 Closed           \n 5     5 Closed           \n 6     6 Open             \n 7     7 Closed           \n 8     8 Closed           \n 9     9 Closed           \n10    10 Open             \n# ‚Ñπ 11 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 5 code + edit {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclubs |>\n  mutate(membership_status = if_else(is.na(membership_status), \"Closed\", \"Open\")) |>\n  relocate(membership_status)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 √ó 2\n   membership_status  club\n   <chr>             <dbl>\n 1 Open                  1\n 2 Closed                2\n 3 Open                  3\n 4 Closed                4\n 5 Closed                5\n 6 Open                  6\n 7 Closed                7\n 8 Closed                8\n 9 Closed                9\n10 Open                 10\n# ‚Ñπ 11 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 5 code + edit {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclubs <- clubs |>\n  mutate(membership_status = if_else(is.na(membership_status), \"Closed\", \"Open\")) |>\n  relocate(membership_status)\n\nclubs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21 √ó 2\n   membership_status  club\n   <chr>             <dbl>\n 1 Open                  1\n 2 Closed                2\n 3 Open                  3\n 4 Closed                4\n 5 Closed                5\n 6 Open                  6\n 7 Closed                7\n 8 Closed                8\n 9 Closed                9\n10 Open                 10\n# ‚Ñπ 11 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Example 2 {.smaller}\n\n::: question\nEach CSI franchise includes a number of series, each with the character string `\"CSI\"` (in capital letters) in their title.\nUsing this information, create a new data frame called `csi` that only has titles from the CSI-verse and all of the columns from `tv` for these titles.\nThen, display the first 10 rows of `csi`.\n**Note:** The titles and seasons included in the dataset may not be all CSI titles and titles that have ever aired.\n:::\n\n## Chat GPT - Take 1 prompt\n\n> Each CSI franchise includes a number of series, each with the character string `\"CSI\"` (in capital letters) in their title.\n> Using this information, create a new data frame called `csi` that only has titles from the CSI-verse and all of the columns from `tv` for these titles.\n> Then, display the first 10 rows of `csi`.\n> **Note:** The titles and seasons included in the dataset may not be all CSI titles and titles that have ever aired.\n\n## Chat GPT - Take 1 response {.xsmall}\n\n> Certainly!\n> To filter the `tv` data frame to include only titles from the CSI-verse, you can use the `filter` function from the `dplyr` package.\n> Here's the code:\n>\n> ``` r\n> library(dplyr)\n>\n> # Assuming your dataset is named 'tv'\n> csi <- tv %>%\n>   filter(str_detect(title, \"CSI\", case_insensitive = TRUE))\n>\n> # Display the first 10 rows of the 'csi' data frame\n> head(csi, 10)\n> ```\n>\n> This code uses the `filter` function to select rows where the `title` column contains the string \"CSI\" (case-insensitive).\n> The resulting data frame, `csi`, will include only titles from the CSI-verse along with all the columns from the original `tv` data frame.\n> Make sure to replace 'tv' with the actual name of your dataset.\n\n## Chat GPT - Take 1 code {.xsmall}\n\n::: question\nWhat is wrong with the following code?\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv <- read_csv(\"data/tv.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Assuming your dataset is named 'tv'\ncsi <- tv %>%\n  filter(str_detect(title, \"CSI\", case_insensitive = TRUE))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `filter()`:\n‚Ñπ In argument: `str_detect(title, \"CSI\", case_insensitive = TRUE)`.\nCaused by error in `str_detect()`:\n! unused argument (case_insensitive = TRUE)\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display the first 10 rows of the 'csi' data frame\nhead(csi, 10)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'csi' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 2 prompt\n\n> str_detect doesn't have a case_insensitive argument, can you try again?\n\n## Chat GPT - Take 2 response {.xsmall}\n\n> You are correct, and I appreciate your understanding.\n> The `str_detect` function itself doesn't have a `case_insensitive` argument.\n> Instead, you can use the `str_which` function along with the `case_insensitive` argument in the `filter` function.\n> Here's the corrected code:\n>\n> ``` r\n> library(dplyr)\n>\n> # Assuming your dataset is named 'tv'\n> csi <- tv %>%\n>   filter(str_detect(title, \"CSI\", ignore_case = TRUE))\n>\n> # Display the first 10 rows of the 'csi' data frame\n> head(csi, 10)\n> ```\n>\n> This code uses `str_detect` within the `filter` function and includes the `ignore_case = TRUE` argument to perform a case-insensitive search.\n> The resulting `csi` data frame will contain only titles from the CSI-verse along with all the columns from the original `tv` data frame.\n> Make sure to replace 'tv' with the actual name of your dataset.\n\n## Chat GPT - Take 2 code {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Assuming your dataset is named 'tv'\ncsi <- tv %>%\n  filter(str_detect(title, \"CSI\", ignore_case = TRUE))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `filter()`:\n‚Ñπ In argument: `str_detect(title, \"CSI\", ignore_case = TRUE)`.\nCaused by error in `str_detect()`:\n! unused argument (ignore_case = TRUE)\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display the first 10 rows of the 'csi' data frame\nhead(csi, 10)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'csi' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Chat GPT - Take 3 prompt\n\n> str_detect doesn't have an ignore_case argument either, can you try again?\n\n## Chat GPT - Take 3 response {.xsmall}\n\n> I apologize for the oversight.\n> It seems there was a mistake in my responses.\n> To perform a case-insensitive search, you can use the `stringi` package along with `stri_detect_regex`.\n> Here's the corrected code:\n>\n> ``` r\n> library(dplyr)\n> library(stringi)\n>\n> # Assuming your dataset is named 'tv'\n> csi <- tv %>%\n>   filter(stri_detect_regex(title, \"CSI\", case_insensitive = TRUE))\n>\n> # Display the first 10 rows of the 'csi' data frame\n> head(csi, 10)\n> ```\n>\n> This code uses `stri_detect_regex` from the `stringi` package within the `filter` function, and it includes the `case_insensitive = TRUE` argument for a case-insensitive search.\n> The resulting `csi` data frame will contain only titles from the CSI-verse along with all the columns from the original `tv` data frame.\n> Make sure to replace 'tv' with the actual name of your dataset.\n\n## Let's go back to Take 1 {.smaller}\n\nand edit it a bit:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv |>\n  filter(str_detect(title, \"CSI\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 √ó 9\n   season title                         year month   day av_rating genre_1 genre_2 genre_3\n    <dbl> <chr>                        <dbl> <dbl> <dbl>     <dbl> <chr>   <chr>   <chr>  \n 1      1 CSI: Crime Scene Investigat‚Ä¶  2001     1    20      8.32 Crime   Drama   Mystery\n 2      2 CSI: Crime Scene Investigat‚Ä¶  2002     1    10      8.26 Crime   Drama   Mystery\n 3      3 CSI: Crime Scene Investigat‚Ä¶  2003     1    15      8.30 Crime   Drama   Mystery\n 4      4 CSI: Crime Scene Investigat‚Ä¶  2004     1    18      8.33 Crime   Drama   Mystery\n 5      5 CSI: Crime Scene Investigat‚Ä¶  2005     1    24      8.38 Crime   Drama   Mystery\n 6      6 CSI: Crime Scene Investigat‚Ä¶  2006     1    16      8.21 Crime   Drama   Mystery\n 7      7 CSI: Crime Scene Investigat‚Ä¶  2007     1    14      8.43 Crime   Drama   Mystery\n 8      8 CSI: Crime Scene Investigat‚Ä¶  2008     1     7      8.07 Crime   Drama   Mystery\n 9      9 CSI: Crime Scene Investigat‚Ä¶  2009     1    27      7.80 Crime   Drama   Mystery\n10     10 CSI: Crime Scene Investigat‚Ä¶  2010     1    23      7.69 Crime   Drama   Mystery\n# ‚Ñπ 26 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Let's go back to Take 1 {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsi <- tv |>\n  filter(str_detect(title, \"CSI\"))\n\ncsi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 √ó 9\n   season title                         year month   day av_rating genre_1 genre_2 genre_3\n    <dbl> <chr>                        <dbl> <dbl> <dbl>     <dbl> <chr>   <chr>   <chr>  \n 1      1 CSI: Crime Scene Investigat‚Ä¶  2001     1    20      8.32 Crime   Drama   Mystery\n 2      2 CSI: Crime Scene Investigat‚Ä¶  2002     1    10      8.26 Crime   Drama   Mystery\n 3      3 CSI: Crime Scene Investigat‚Ä¶  2003     1    15      8.30 Crime   Drama   Mystery\n 4      4 CSI: Crime Scene Investigat‚Ä¶  2004     1    18      8.33 Crime   Drama   Mystery\n 5      5 CSI: Crime Scene Investigat‚Ä¶  2005     1    24      8.38 Crime   Drama   Mystery\n 6      6 CSI: Crime Scene Investigat‚Ä¶  2006     1    16      8.21 Crime   Drama   Mystery\n 7      7 CSI: Crime Scene Investigat‚Ä¶  2007     1    14      8.43 Crime   Drama   Mystery\n 8      8 CSI: Crime Scene Investigat‚Ä¶  2008     1     7      8.07 Crime   Drama   Mystery\n 9      9 CSI: Crime Scene Investigat‚Ä¶  2009     1    27      7.80 Crime   Drama   Mystery\n10     10 CSI: Crime Scene Investigat‚Ä¶  2010     1    23      7.69 Crime   Drama   Mystery\n# ‚Ñπ 26 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Guidelines and best practices for using Chat GPT {.smaller}\n\n::: incremental\n-   Do [**not**]{.underline} just copy-paste the prompt ‚Äì for appropriate academic conduct, for your own learning, and for getting to better results faster\n-   Engineer the prompt until the response starts to look like code you're learning in the course\n-   If the response is not correct, ask for a correction\n-   If the response doesn't follow the guidelines, ask for a correction\n-   Do not just copy-paste code from Chat GPT responses, run it line-by-line and edit as needed\n-   Watch out for clear mistakes in the response: do not keep loading packages that are already loaded, use the base pipe `|>`, use tidyverse-based code, etc.\n:::\n",
    "supporting": [
      "12-chat-gpt_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}