{
  "hash": "ef6574ea6eda425da666271fcb529e3a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Grammar of data wrangling\"\nsubtitle: \"Lecture 5\"\ndate: \"January 30, 2024\"\nformat: \n  revealjs:\n    footer: \"[üîó sta199-s24.github.io](https://sta199-s24.github.io/) &nbsp;¬∑&nbsp; [‚ùì Ask on Ed](https://edstem.org/us/courses/50730/discussion/4223179)\"\n---\n\n\n\n\n\n\n# Warm up\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## While you wait for class to begin...\n\n-   Go to your `ae` repo, click *Pull* to get today's application exercise to get ready for later.\n\n-   Questions from the prepare materials?\n\n\n\n\n\n\n    ```{=html}\n    <iframe allowfullscreen frameborder=\"0\" height=\"100%\" mozallowfullscreen style=\"min-width: 500px; min-height: 355px\" src=\"https://app.wooclap.com/STA199S24?from=status-bar?\" width=\"100%\"></iframe>\n    ```\n\n\n\n\n\n\n## Asking good questions {.smaller}\n\n-   Post content questions on Ed Discussion\n-   If you have a coding question always provide the code, and if relevant, the error\n    -   If this feels impossible, don't fret it, it's ok to ask questions without the code. It's just more efficient with it!\n-   Title your thread in a way that can help others (e.g., \"Q7\" vs. \"error with `mutate()` function in Lab 1 - Q7\")\n-   Check for previous questions\n\n## Coding style + workflow\n\n::: incremental\n-   Avoid long lines of code.\n\n    -   We should be able to see [all]{.underline} of your code in the PDF document you submit.\n\n-   Label code chunks.\n\n    -   Do **not** put spaces in the code-chunk `label`s.\n\n-   Render, commit, and push regularly.\n\n    -   Think about it like clicking to save regularly as you type a report.\n:::\n\n## Lab 1\n\n![](images/lab-1-commits.png){fig-align=\"center\"}\n\n# Data frames and `tibble`s\n\n## NYC Flights\n\n-   To demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package.\n\n-   The data set includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n\n\n\n\n## `flights` -- dimensions\n\n-   Number of rows:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 336776\n```\n\n\n:::\n:::\n\n\n\n\n\n\n. . .\n\n-   Number of columns:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `flights` -- first look {.smaller}\n\n::: panel-tabset\n## `glimpse()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,‚Ä¶\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,‚Ä¶\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,‚Ä¶\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, 558, 558, ‚Ä¶\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, 600, 600, ‚Ä¶\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1, 0, -1, 0‚Ä¶\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849, 853, 924,‚Ä¶\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851, 856, 917,‚Ä¶\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -14, 31, -4,‚Ä¶\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"AA\", \"B6\",‚Ä¶\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 49, 71, 194‚Ä¶\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N39463\", \"N516‚Ä¶\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\", \"JFK\", \"L‚Ä¶\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\", \"MCO\", \"O‚Ä¶\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 158, 345, 3‚Ä¶\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, 1028, 1005‚Ä¶\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6,‚Ä¶\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0,‚Ä¶\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2‚Ä¶\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `names()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"       \"sched_dep_time\"\n [6] \"dep_delay\"      \"arr_time\"       \"sched_arr_time\" \"arr_delay\"      \"carrier\"       \n[11] \"flight\"         \"tailnum\"        \"origin\"         \"dest\"           \"air_time\"      \n[16] \"distance\"       \"hour\"           \"minute\"         \"time_hour\"     \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `head()`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 √ó 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n1  2013     1     1      517            515         2      830            819        11\n2  2013     1     1      533            529         4      850            830        20\n3  2013     1     1      542            540         2      923            850        33\n4  2013     1     1      544            545        -1     1004           1022       -18\n5  2013     1     1      554            600        -6      812            837       -25\n6  2013     1     1      554            558        -4      740            728        12\n# ‚Ñπ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n## `tibble` vs. data frame\n\n::: incremental\n-   **tibble**: an opinionated version of the `R` data frame\n-   All tibbles are data frames, but not all data frames are tibbles!\n-   Two main differences between a tibble and a data frame:\n    -   Printing\n    -   Stricter subsetting\n:::\n\n## Printing {.smaller}\n\n::: panel-tabset\n## `tibble`\n\nDisplay first 10 rows and all of the columns that fit on the screen will display, along with the type of each column.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2      830            819        11\n 2  2013     1     1      533            529         4      850            830        20\n 3  2013     1     1      542            540         2      923            850        33\n 4  2013     1     1      544            545        -1     1004           1022       -18\n 5  2013     1     1      554            600        -6      812            837       -25\n 6  2013     1     1      554            558        -4      740            728        12\n 7  2013     1     1      555            600        -5      913            854        19\n 8  2013     1     1      557            600        -3      709            723       -14\n 9  2013     1     1      557            600        -3      838            846        -8\n10  2013     1     1      558            600        -2      753            745         8\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `data.frame`\n\n(Attempt to) display all of the data, or die (crash) tryin (if the dataset is too large)!\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n## Stricter subsetting\n\n::: panel-tabset\n## `tibble`\n\nWarning + `NULL` if variable not found.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights$apple\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `data.frame`\n\nOnly `NULL` if variable not found.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars$apple\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n# Data wrangling with `dplyr`\n\n## dplyr\n\nPrimary package in the tidyverse for data wrangling\n\n::: columns\n::: {.column width=\"50%\"}\n[dplyr.tidyverse.org](https://dplyr.tidyverse.org)\n\n\n\n\n\n\n```{=html}\n<iframe width=600 height=375 src=\"https://dplyr.tidyverse.org/\" title=\"dplyr home page\"></iframe>\n```\n\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n[Cheat sheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html)\n\n[![](images/dplyr-cheat-sheet.png)](https://rstudio.github.io/cheatsheets/html/data-transformation.html)\n:::\n:::\n\n## Row operations\n\n-   `slice()`: chooses rows based on location\n-   `filter()`:chooses rows based on column values\n-   `arrange()`: changes the order of the rows\n-   `sample_n()`: take a random subset of the rows\n\n## `slice()` {.smaller}\n\nDisplay the first five rows of `flights`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2\"}\nflights |>      # <1>   \n  slice(1:5)    # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n1  2013     1     1      517            515         2      830            819        11\n2  2013     1     1      533            529         4      850            830        20\n3  2013     1     1      542            540         2      923            850        33\n4  2013     1     1      544            545        -1     1004           1022       -18\n5  2013     1     1      554            600        -6      812            837       -25\n# ‚Ñπ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n1.  Take the `flights` data frame, **and then**,\n2.  Slice its first five rows\n\n## `filter()` {.smaller}\n\nFilter for flights to RDU in `flights`:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2\"}\nflights |>                 # <1>   \n  filter(dest == \"RDU\")    # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1  2013     1     1      800            810       -10      949            955        -6\n 2  2013     1     1      832            840        -8     1006           1030       -24\n 3  2013     1     1      851            851         0     1032           1036        -4\n 4  2013     1     1      917            920        -3     1052           1108       -16\n 5  2013     1     1     1024           1030        -6     1204           1215       -11\n 6  2013     1     1     1127           1129        -2     1303           1309        -6\n 7  2013     1     1     1157           1205        -8     1342           1345        -3\n 8  2013     1     1     1240           1235         5     1415           1415         0\n 9  2013     1     1     1317           1325        -8     1454           1505       -11\n10  2013     1     1     1449           1450        -1     1651           1640        11\n# ‚Ñπ 8,153 more rows\n# ‚Ñπ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n1.  Take the `flights` data frame, **and then**,\n2.  Filter for rows where `dest` *is equal to* `RDU`\n\n## The pipe\n\n::: incremental\n-   The **pipe**, `|>`, is an operator (a tool) for passing information from one process to another.\n\n-   Use `|>` mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.\n\n-   When reading code \"in English\", say \"and then\" whenever you see a pipe.\n:::\n\n## Delayed flights to RDU\n\n::: demo\nWhich airline is the most delayed, on average, arriving in RDU from a New York City airport?\n:::\n\n. . .\n\n**Goal:**\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 2\n  carrier mean_arr_delay\n  <chr>            <dbl>\n1 UA               56   \n2 B6               13.3 \n3 EV               12.2 \n4 9E                9.67\n5 MQ                8.82\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## The pipe, in action {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2      830            819        11\n 2  2013     1     1      533            529         4      850            830        20\n 3  2013     1     1      542            540         2      923            850        33\n 4  2013     1     1      544            545        -1     1004           1022       -18\n 5  2013     1     1      554            600        -6      812            837       -25\n 6  2013     1     1      554            558        -4      740            728        12\n 7  2013     1     1      555            600        -5      913            854        19\n 8  2013     1     1      557            600        -3      709            723       -14\n 9  2013     1     1      557            600        -3      838            846        -8\n10  2013     1     1      558            600        -2      753            745         8\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n1.  Take the flights data frame\n\n## The pipe, in action {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>               # <1>\n  filter(dest == \"RDU\")  # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1  2013     1     1      800            810       -10      949            955        -6\n 2  2013     1     1      832            840        -8     1006           1030       -24\n 3  2013     1     1      851            851         0     1032           1036        -4\n 4  2013     1     1      917            920        -3     1052           1108       -16\n 5  2013     1     1     1024           1030        -6     1204           1215       -11\n 6  2013     1     1     1127           1129        -2     1303           1309        -6\n 7  2013     1     1     1157           1205        -8     1342           1345        -3\n 8  2013     1     1     1240           1235         5     1415           1415         0\n 9  2013     1     1     1317           1325        -8     1454           1505       -11\n10  2013     1     1     1449           1450        -1     1651           1640        11\n# ‚Ñπ 8,153 more rows\n# ‚Ñπ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU\n\n## The pipe, in action {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier)         # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 √ó 19\n# Groups:   carrier [5]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1  2013     1     1      800            810       -10      949            955        -6\n 2  2013     1     1      832            840        -8     1006           1030       -24\n 3  2013     1     1      851            851         0     1032           1036        -4\n 4  2013     1     1      917            920        -3     1052           1108       -16\n 5  2013     1     1     1024           1030        -6     1204           1215       -11\n 6  2013     1     1     1127           1129        -2     1303           1309        -6\n 7  2013     1     1     1157           1205        -8     1342           1345        -3\n 8  2013     1     1     1240           1235         5     1415           1415         0\n 9  2013     1     1     1317           1325        -8     1454           1505       -11\n10  2013     1     1     1449           1450        -1     1651           1640        11\n# ‚Ñπ 8,153 more rows\n# ‚Ñπ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier\n\n## The pipe, in action {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier) |>      # <3>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) # <4>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 2\n  carrier mean_arr_delay\n  <chr>            <dbl>\n1 9E                9.67\n2 B6               13.3 \n3 EV               12.2 \n4 MQ                8.82\n5 UA               56   \n```\n\n\n:::\n:::\n\n\n\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier,\n4.  **and then** calculate the mean arrival delay for each carrier\n\n## The pipe, in action {.smaller}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier) |>      # <3>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) |> # <4>\n  arrange(desc(mean_arr_delay)) # <5>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 2\n  carrier mean_arr_delay\n  <chr>            <dbl>\n1 UA               56   \n2 B6               13.3 \n3 EV               12.2 \n4 9E                9.67\n5 MQ                8.82\n```\n\n\n:::\n:::\n\n\n\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier,\n4.  **and then** calculate the mean arrival delay for each carrier,\n5.  **and then** arrange in descending order of mean arrival delay.\n\n## Column operations\n\n-   `select()`: changes whether or not a column is included.\n-   `rename()`: changes the name of columns.\n-   `mutate()`: changes the values of columns and creates new columns.\n\n## Groups of rows\n\n-   `summarize()`: collapses a group into a single row.\n-   `count()`: count unique values of one or more variables.\n-   `group_by()`: perform calculations separately for each value of a variable\n\n# Application exercise\n\n## `ae-04-flights-wrangling`\n\n::: appex\n-   Go to the project navigator in RStudio (top right corner of your RStudio window) and open the project called `ae`.\n\n-   If there are any uncommitted files, commit them, and then click **Pull**.\n\n-   Open the file called `ae-04-flights-wrangling.qmd` and render it.\n:::\n\n## Recap: pipe {.smaller}\n\n-   The pipe operator passes what comes before it into the function that comes after it as the first argument in that function.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n1 |> \n  sum(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n\n-   Always use a line break after the pipe, and indent the next line of code.\n    -   Just like always use a line break between layers of ggplots, after `+`, and indent the next line.\n\n## Recap: logical operators {.smaller}\n\n| operator | definition                   |\n|:---------|:-----------------------------|\n| `<`      | is less than?                |\n| `<=`     | is less than or equal to?    |\n| `>`      | is greater than?             |\n| `>=`     | is greater than or equal to? |\n| `==`     | is exactly equal to?         |\n| `!=`     | is not equal to?             |\n\n## Recap: logical operators {.smaller}\n\n| operator      | definition                                               |\n|:--------------|:---------------------------------------------------------|\n| `x & y`       | is x AND y?                                              |\n| `x \\| y`      | is x OR y?                                               |\n| `is.na(x)`    | is x NA?                                                 |\n| `!is.na(x)`   | is x not NA?                                             |\n| `x %in% y`    | is x in y?                                               |\n| `!(x %in% y)` | is x not in y?                                           |\n| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |\n",
    "supporting": [
      "05-grammar-of-data-wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}